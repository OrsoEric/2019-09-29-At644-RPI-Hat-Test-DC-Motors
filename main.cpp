/****************************************************************************
**	ORANGEBOT PROJECT
*****************************************************************************
**	HotBlack Shield - DC Motor Testing
*****************************************************************************
**	Author: 			Orso Eric
**	Creation Date:
**	Last Edit Date:
**	Revision:			1
**	Version:			0.1 ALPHA
****************************************************************************/

/****************************************************************************
**	HYSTORY VERSION
*****************************************************************************
**	R1 V0.1ALPHA
**		>
****************************************************************************/

/****************************************************************************
**	DESCRIPTION
*****************************************************************************
**	Robot: SeekerOfWaysB
**	Hardware: HotBlackShield V1
****************************************************************************/

/****************************************************************************
**	USED PIN
**	TIPS: compile this field before writing any code: it really helps!
*****************************************************************************
**	H-Bridges
**	PB2			|	Power Enable
**	PD4, OC1B	|	H-Bridge A PWM-
**	PD5, OC1A	|	H-Bridge A PWM+
**	PD6, OC2B	|	H-Bridge B PWM-
**	PD7, OC2A	|	H-Bridge B PWM+
**
**	Encoders
**
****************************************************************************/

/****************************************************************************
**	USED PHERIPERALS
**	TIPS: compile this field before writing any code: it really helps!
*****************************************************************************
**
****************************************************************************/

/****************************************************************************
**	KNOWN BUG
*****************************************************************************
**	>
****************************************************************************/

/****************************************************************************
**	TODO
*****************************************************************************
**
****************************************************************************/

/****************************************************************************
**	ENVROIMENT VARIABLES
****************************************************************************/

/****************************************************************************
**	INCLUDES
****************************************************************************/

#include "global.h"

/****************************************************************************
**	DEFINE
****************************************************************************/

//define for the mail loop
#define EVER (;;)

/****************************************************************************
**	MACRO
****************************************************************************/

/****************************************************************************
**	STRUCTURES
****************************************************************************/

/****************************************************************************
**	PROTOTYPE: FUNCTIONS
****************************************************************************/

extern void set_pwm_a( bool dir, int8_t pwm );
extern void set_pwm_b( bool dir, int8_t pwm );

/****************************************************************************
**	PROTOTYPE: GLOBAL VARIABLES
****************************************************************************/

/****************************************************************************
**	GLOBAL VARIABLES:
****************************************************************************/

//Volatile flags used by ISRs
volatile Isr_flags flags;

///----------------------------------------------------------------------
///	BUFFERS
///----------------------------------------------------------------------
//	Buffers structure and data vectors

/****************************************************************************
**	MAIN
****************************************************************************/

int main( void )
{
	///----------------------------------------------------------------------
	///	VARS
	///----------------------------------------------------------------------
	
	//prescaler
	uint8_t pre = 0;
	//motor to be tested. false: A, true: B
	bool f_motor = false;
	//direction of the motor. false: forward, true backward
	bool f_dir = false;
	//ramp. false: accelerate, true: decelerate
	bool f_ramp = false;
	//pwm
	uint8_t cnt = 0;


	///----------------------------------------------------------------------
	///	INIT
	///----------------------------------------------------------------------

	//Init all pins, init all devices
	global_init();

	//Power to the H-Bridges
	H_BRIDGE_ON();

	///----------------------------------------------------------------------
	///	MAIN LOOP
	///----------------------------------------------------------------------

	//Main Loop
	for EVER
	{

		///----------------------------------------------------------------------
		///	100.16 [Hz] Tick
		///----------------------------------------------------------------------

		//If: tick
		if (flags.led_update == 1)
		{
			///----------------------------------------------------------------------
			///	Led Blink
			///----------------------------------------------------------------------

			TOGGLE_BIT( PORTB, PB7 );
			//Clear flag
			flags.led_update = 0;
			//advance prescaler (10 counts then reset)
			pre = (pre <= (10-1))?(pre +1):(0);
			//when prescaler is reset (1s)
			if (pre == 0)
			{
				//Toggle leds
				TOGGLE_BIT( PORTB, PB6 );
			}

			///----------------------------------------------------------------------
			///	Motor speed ramp
			///----------------------------------------------------------------------

			//If increase speed
			if (f_ramp == false)
			{
				//increase speed
				cnt++;
				//if: speed cap
				if (cnt >= (uint8_t)0xff)
				{
					//now decrease speed
					f_ramp = true;
				}
			}
			//If decrease speed
			else
			{
				//decrease speed
				cnt--;
				//If: speed cap
				if (cnt <= (uint8_t)0x00)
				{
					//Now increase speed
					f_ramp = false;
					//Invert motor direction
					f_dir = !f_dir;
					//If I'm going forward again
					if (f_dir == false)
					{
						//change motor under test
						f_motor = !f_motor;
					}
				}
			}

			if (f_motor == false)
			{
				set_pwm_a( f_dir, cnt );
				set_pwm_b( false, (uint8_t)0x00 );
				
			}
			else
			{
				set_pwm_a( false, (uint8_t)0x00 );
				set_pwm_b( f_dir, cnt );
			}
			

		}	//Endif: 100mS tick

	}	//end for: for EVER

	///----------------------------------------------------------------------
	///	MAIN LOOP
	///----------------------------------------------------------------------

	return 0;
}	//end main

/****************************************************************************
** FUNCTIONS:
****************************************************************************/

/****************************************************************************
** set_pwm_a
*****************************************************************************
**	Set the PWM of motor A
**	dir	: 0 = forward | 1 = backward
**	pwm	: 0 = stop | 0xff = full speed
****************************************************************************/

inline void set_pwm_a( bool dir, int8_t pwm )
{
	OCR1AL = (dir == true)?((uint8_t)0x00):(pwm);
	OCR1BL = (dir == false)?((uint8_t)0x00):(pwm);

	return;
}

/****************************************************************************
** set_pwm_b
*****************************************************************************
**	Set the PWM of motor A
**	dir	: 0 = forward | 1 = backward
**	pwm	: 0 = stop | 0xff = full speed
****************************************************************************/

inline void set_pwm_b( bool dir, int8_t pwm )
{
	OCR2A = (dir == true)?((uint8_t)0x00):(pwm);
	OCR2B = (dir == false)?((uint8_t)0x00):(pwm);

	return;
}
